Proyecto: Chatbot con ChromaDB y embeddings

Descripción breve
------------------
Este repositorio contiene una aplicación web sencilla (Flask) que expone un chat que responde usando vectores embebidos almacenados en ChromaDB. El proyecto incluye utilidades para procesar documentos PDF e "intents" (ejemplos de intención) y crear colecciones de vectores (collections) en una base persistente de ChromaDB ubicada en `./chroma_db`.

Estructura clave
- `app.py` / `run.py`: Entrypoints para ejecutar la app Flask (http://localhost:5000).
- `src/services/`: Servicios para generar embeddings y manejar ChromaDB (`VectorService`, `DocsToEmbedService`, `IntentToEmbedService`).
- `chroma_utils/`: Scripts utilitarios para reconstruir colecciones: `process_docs.py`, `process_intents.py`, `load_all_collections.py`.
- `chroma_db/`: Carpeta donde Chroma guarda la base de datos persistente (ya contiene datos de ejemplo en este repo).

Requisitos
- Python 3.8+ (el proyecto fue desarrollado con Python 3.13 en el entorno virtual incluido).
- Recomendado crear un entorno virtual y usar el `pip` dentro de `env/Scripts` si desea replicar exactamente el entorno provisto.
- Crear un .env para colocar la variable llamada GOOGLE_API_KEY="SU API KEY" la api se obtiene desde https://aistudio.google.com/prompts/new_chat


Dependencias principales (listadas en `setup.py`)
- flask
- chromadb
- sentence-transformers
- PyPDF2
- llama-index
- python-dotenv

Pasos para replicar el proyecto (Windows - PowerShell)
---------------------------------------------------
1) Clonar o copiar el repositorio
	- Asegúrate de estar en la carpeta donde quieras colocar el proyecto.

2) Crear y activar un entorno virtual (opcional pero recomendado)
	# Desde PowerShell
	python -m venv env; .\env\Scripts\Activate.ps1

3) Instalar dependencias
	# Usa el pip del entorno virtual
	python -m pip install --upgrade pip; python -m pip install -e .

	Nota: `setup.py` instala las dependencias principales; si prefieres, crea un `requirements.txt` y usa `pip install -r requirements.txt`.

4) Preparar datos para embeddings (opcional)
	- Coloca tus archivos PDF dentro de `chroma_utils/data/docs/`.
	- Revisa `chroma_utils/data/intents_data.py` para editar o ampliar los ejemplos de intent.

5) Reconstruir (o cargar) las colecciones de ChromaDB
	- Procesar solo documentos:
	  python chroma_utils\process_docs.py

	- Procesar solo intents:
	  python chroma_utils\process_intents.py #los intents son para el manejo del prerouting (intencion del usuario)

	- Procesar ambos (docs + intents):
	  python chroma_utils\load_all_collections.py

	Estos scripts usan `src/services/*` para generar embeddings con `sentence-transformers` y almacenarlos en `./chroma_db`.

6) Ejecutar la aplicación Flask
	# Desde la raíz del proyecto
	python run.py

	- Abre un navegador en: http://localhost:5000

7) Revisar chunks guardados (útil para depuración)
	python view_chunks.py
	- Generará `chunks_review.txt` con ejemplos de chunks extraídos y almacenados.

Tips y consideraciones
- Modelos y consumo: `sentence-transformers` descargará modelos (ej. `all-mpnet-base-v2`) la primera vez; requiere internet y algo de RAM.
- ChromaDB persistente: la base se guarda en `./chroma_db`. Si quieres empezar limpio, para la reproducibilidad mueve o borra esa carpeta antes de ejecutar los scripts de carga.
- Versiones: Si ves errores por incompatibilidades, instala versiones estables conocidas de `chromadb` y `sentence-transformers` (por ejemplo `chromadb==0.4.*`, `sentence-transformers==2.*`).

Problemas comunes
- Error al leer PDFs: revisa que `PyPDF2` soporte los archivos; algunos PDFs escaneados no contienen texto seleccionable.
- Problemas de import al ejecutar scripts desde la raíz: los scripts en `chroma_utils` manipulan `sys.path` para localizar `src` y `chroma_utils` — ejecuta los scripts desde la raíz del repo para evitar rutas relativas rotas.

Verificación rápida (checklist)
- Entorno virtual activo
- Dependencias instaladas sin errores
- Archivos PDFs colocados en `src/data/docs/` o `chroma_utils/data/docs/`
- Ejecutar `python chroma_utils\load_all_collections.py` y confirmar mensajes de éxito
- Ejecutar `python run.py` y abrir http://localhost:5000

Contacto y próximos pasos
- Si quieres, puedo añadir un `requirements.txt`, un `README.md` más extenso en Markdown, o scripts para crear un entorno reproducible (por ejemplo `make` o `tasks.json`).

---
Nota: He basado estas instrucciones leyendo `app.py`, `run.py`, `setup.py` y los servicios en `src/services`. Si quieres que adapte las rutas a tu estructura exacta (por ejemplo mover `docs` a `src/data/docs`), dime y lo ajusto.